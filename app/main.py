from fastapi import FastAPI, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from app.schemas import FlightSearchRequest
import traceback

app = FastAPI()

# Middleware CORS ‚Äì pozwala na zapytania z innych ≈∫r√≥de≈Ç (np. frontend)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # W produkcji warto ograniczyƒá
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ≈Åadowanie szablon√≥w HTML
templates = Jinja2Templates(directory="templates")


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/search")
async def search_flights(request: FlightSearchRequest):
    try:
        # Debugowanie danych wej≈õciowych
        print("üîç Rozpoczƒôto wyszukiwanie lot√≥w:", request)

        # Przyk≈Çadowe dane zwracane (symulacja)
        wyniki = {
            "loty": [
                {
                    "miejsce_wylotu": request.origin,
                    "miejsce_docelowe": request.destination,
                    "data_wylotu": request.departure_date,
                    "cena": "199.99 EUR",
                    "linia_lotnicza": "Flyzy Airlines",
                }
            ]
        }

        print("‚úÖ Znaleziono wyniki:", wyniki)
        return wyniki

    except Exception as e:
        print("‚ùå B≈ÇƒÖd podczas wyszukiwania lot√≥w:", e)
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail="WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania wyszukiwania lot√≥w."
        )
